# start with the global settings which will
# apply to all sections in the configuration.
global
  log 127.0.0.1 local0
  log 127.0.0.1 local1 notice
  maxconn 4096
  pidfile /var/run/haproxy.pid
  daemon
  
# now set the default settings for each sub-section
defaults
  log  global
  # stick with http traffic
  mode http
  # set the number of times HAProxy should attempt to
  # connect to the target
  retries 3
  # specify the number of connections per front and
  # back end
  maxconn 2000
  # specify some timeouts (all in milliseconds)
  timeout connect 5000
  timeout client 50000
  timeout server 50000


########### Webmachine Configuration ###################

# here is the first of the front-end sections.
# this is where we specify our webmachine instances.
# in our case we start with just one instance, but
# we can add more later
frontend webfarm
  option httplog
  option dontlognull  
  # listen on port 80 across all network interfaces
  bind *:80,*:443
  # by default, point at our backend configuration
  # which lists our webmachine instances (this is
  # configured below in another section)
  default_backend webmachines

# this section indicates how the connectivity to
# all the instances of webmachine should work.
backend webmachines
  # we'll specify a round-robin configuration in
  # case we add nodes down the track.
  balance roundrobin
  # enable the "X-Forware-For" header so that
  # we can see the client's IP in Webmachine,
  # not just the proxy's address
  option forwardfor
  # list the servers who are to be balanced
# !-- start: webmachine instances --!  
# server Webmachine1 127.0.0.1:8000
# !-- end: webmachine instances --!    

########### Riak Configuration ###################

# We are yet to touch Riak so far, but given that
# this post is going to cover the basics of
# connectivity, we'll cover off the configuration
# now so we don't have to do it later.
frontend dbcluster
  # We'll be using protocol buffers to talk to
  # Riak, so we will change from the default mode
  # and use tcp instead
  mode tcp
  bind *:8001
  # Default to the riak cluster configuration
  default_backend riaks

# Here is the magic bit which load balances across
# our three instances of riak which are clustered
# together
backend riaks
  # again, make sure we specify tcp instead of
  # the default http mode
  mode tcp
  # use a standard round robin approach for load
  # balancing
  balance roundrobin
  # enable HTTP health checking using the GET method
  # on the URI "/ping". This URI is part of Riak and
  # can be used to determine if the node is up.
  # We specify that we want to use the GET action, and
  # use the URI "/ping" - this is the RESTful health
  # check URI that comes as part of Riak.
  option httpchk GET /ping  
  # Riak instances
# !-- start: riak instances --!  
#server Riak1 127.0.0.1:8081 check addr 127.0.0.1 port 8091
# !-- end: riak instances --!

# KEEP THIS LINE HERE
