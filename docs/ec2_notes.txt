========================================================================
Using Amazon EC2

References (in order):
http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/SettingUp_CommandLine.html
http://www.cygwin.org/
http://www.powercram.com/2009/12/installing-ec2-command-line-tools-on.html
http://paulstamatiou.com/how-to-getting-started-with-amazon-ec2
https://help.ubuntu.com/community/EC2StartersGuide

Two choices, hard/dirt cheap way and the easy/cheap way

Option 1: S3-backed.

1.  Start with an S3-backed AMI.
2.  Customise it.
3.  ec2-bundle-rol
4.  ec2-upload-vol
5.  ec2-register-vol
6.  Close the original instance.

No S3-associated storage costs, but slower to load, higher latency.

Option 2: EBS-backed.

1.  Start with an EBS-backed AMI.
2.  Customise it.
3.  Use AWS web GUI to "stop" the instance.
4.  Use the GUI to create an EBS AMI.
5.  Terminate the original instance.
6.  Can spawn new instances from this EBS volume.

However, storage costs associated with EBS volume.
========================================================================

---------------
Basic setup
---------------
-  Install latest version of Java JDK, set up system environment variable JAVA_HOME.
-  Install latest version of cygwin, within it install rsync/openssh.
-  Sign up for Amazon AWS.
-  Create a new X509 certificate, download it anywhere (e.g. My Documents).
-  Download the latest version of all command-line tools using powercram link (AMI, API, ELB), set up environment variables with respect to cygwin syntax. (API Tools is the EC2_HOME folder)
-  Put all BIN directories of tools into system PATH variable.
-  Verify your setup is working by running:

ec2-describe-regions

-  Execute:

ec2-add-keypair ai_keypair

-  Copy the output, paste it a file "ai_keypair" in the same folder as your X509 certificate.
-  Using the AWS console create a new Security Group that allows inbound port 22/80/443 traffic. (SSH, HTTP, HTTPS).  Call it "ai_securitygroup".

---------------
Launching an AMI
---------------
-  Go here: http://uec-images.ubuntu.com/releases/maverick/release/
-  Let's choose a micro 64-bit AMI backed by an EBS in the EU.  e.g. "ami-e59ca991"
-  Launch a new Cygwin bash shell.
-  Change directory to the location of you X509 certificate and keypair.
-  Execute:

ec2-run-instances ami-e59ca991 -k ai_keypair -t t1.micro -g ai_securitygroup

-  Instance is now coming up.
-  Execute:

ec2-describe-instances

-  Should be there.  Using its hostname connect to it:

ssh -i ai_keypair ubuntu@<hostname>

-  And you're running a node!  Congrats.

---------------
Core setup
---------------

# ----------------------------------------------------------------------
#   Bare essentials.
# ----------------------------------------------------------------------
sudo cp /etc/apt/sources.{list,list.backup}
sudo vim /etc/apt/sources.list
# enable multiverse

sudo add-apt-repository ppa:sun-java-community-team/sun-java6
sudo apt-get update
yes yes | sudo apt-get upgrade
yes yes | sudo apt-get install git mercurial build-essential unzip sun-java6-jre sun-java6-bin sun-java6-jdk python-software-properties ruby

# ----------------------------------------------------------------------
#   Install, set up the Amazon AMI/API/ELB tools.
# ----------------------------------------------------------------------
yes yes | sudo apt-get install ec2-ami-tools ec2-api-tools

mkdir -p ~/downloads && cd ~downloads
wget http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip
wget http://ec2-downloads.s3.amazonaws.com/ElasticLoadBalancing-2009-05-15.zip
wget http://s3.amazonaws.com/ec2-downloads/ec2-ami-tools.zip
unzip ec2-api-tools.zip
unzip ElasticLoadBalancing-2009-05-15.zip
unzip ec2-ami-tools.zip
sudo mv ec2-ami-tools-1.3-66634 /usr/local/bin/ec2-ami-tools
sudo mv ElasticLoadBalancing-1.0.3.4 /usr/local/bin/ElasticLoadBalancing
sudo mv ec2-api-tools-1.4.2.4 /usr/local/bin/ec2-api=tools

vim ~/.bash_profile

JAVA_HOME="/usr/lib/jvm/java-6-sun"
export JAVA_HOME

EC2_HOME="/usr/local/bin/ec2-api-tools"
export EC2_HOME
AWS_ELB="/usr/local/bin/ElasticLoadBalancing"
export AWS_ELB
AWS_AMI_HOME="/usr/local/bin/ec2-ami-tools"
export AWS_AMI_HOME
EC2_AMITOOL_HOME=${AWS_AMI_HOME}
export EC2_AMITOOL_HOME

PATH="${PATH}:${EC2_HOME}/bin:${AWS_ELB}/bin:${AWS_AMI_HOME}/bin:${JAVA_HOME}/bin"
export PATH

save, close

# ----------------------------------------------------------------------
# Install Python and other bits.
# ----------------------------------------------------------------------
yes yes | sudo apt-get install zlib1g-dev libreadline5-dev uuid-dev openssl libssl-dev bzip2 libbz2-dev
mkdir ~/downloads && cd ~downloads
wget http://www.python.org/ftp/python/2.7.1/Python-2.7.1.tgz
tar xvf Python-2.7.1.tgz
cd Python-2.7.1
./configure --prefix=/usr/local/
make
sudo make install

# then follow http://stackoverflow.com/questions/4324558/whats-the-proper-way-to-install-pip-virtualenv-and-distribute-for-python
cd ~
mkdir -p ~/.local
# add ~/.local/bin to $PATH, ~/.local to PYTHONPATH
vim ~/.pydistutils.cfg

[install]
prefix=~/.local

save, close, relaunch shell

mkdir -p /home/ubuntu/.local/lib/python2.7/site-packages/
mkdir -p ~/downloads && cd ~/downloads
curl -O http://python-distribute.org/distribute_setup.py
python distribute_setup.py
easy_install pip
pip install virtualenv
pip install virtualenvwrapper
mkdir -p ~/.virtualenvs

vim ~/.bash_profile (and append)

export WORKON_HOME
source ~/.local/bin/virtualenvwrapper.sh

save, close, relaunch shell

test by running:

pip install httplib2
python
import httplib2
httplib2.__version__
exit()

# ----------------------------------------------------------------------
# Install Erlang.
# http://wiki.basho.com/Installing-Erlang.html
# ----------------------------------------------------------------------
yes yes | sudo apt-get install curl m4 flex xsltproc fop libncurses5-dev unixodbc-dev
mkdir -p ~/downloads && cd ~/downloads
wget http://www.erlang.org/download/otp_src_R14B02.tar.gz
tar xvf otp_src_R14B02.tar.gz
cd otp_src_R14B02
./configure
make
sudo make install

# ----------------------------------------------------------------------
#   Cleanup
# ----------------------------------------------------------------------
cd ~
rm -rf ~/downloads

# ----------------------------------------------------------------------
#   How to bundle.
#   Assuming this is EBS-backed
#   http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/Tutorial_CreateImage.html
# ----------------------------------------------------------------------


# ----------------------------------------------------------------------
#   How to bundle.
#
#   References:
#   http://alestic.com/2009/06/ec2-ami-bundle
# ----------------------------------------------------------------------
-  Copy your keys onto the /mnt/ directory.  In cygwin execute: 

export remoteuser=ubuntu
export remotehost=<host>
rsync --rsh="ssh -i ai_keypair" --rsync-path="sudo rsync" ./{cert,pk}-*.pem $remoteuser@$remotehost:/mnt/

On the remote host execute:
export bucket=aibucket
export prefix=ubuntu_maverick_i386_20110408

export AWS_USER_ID=<your value> (not the canonical ID)
export AWS_ACCESS_KEY_ID=<your value>
export AWS_SECRET_ACCESS_KEY=<your value>

if [ $(uname -m) = 'x86_64' ]; then
  arch=x86_64
else
  arch=i386
fi

sudo rm -f /root/.*hist* $HOME/.*hist*
sudo rm -f /var/log/*.gz
sudo -E ec2-bundle-vol -r $arch -d /mnt -p $prefix -u $AWS_USER_ID -k /mnt/pk-*.pem -c /mnt/cert-*.pem -s 10240 -e /mnt,/root/.ssh,/home/ubuntu/.ssh
# takes around 8 min, monitor top

ec2-upload-bundle -b $bucket -m /mnt/$prefix.manifest.xml -a $AWS_ACCESS_KEY_ID -s $AWS_SECRET_ACCESS_KEY

# finally, in the cygwin instance
ec2-register --name "$bucket/$prefix" $bucket/$prefix.manifest.xml

# output is AMI ID.

